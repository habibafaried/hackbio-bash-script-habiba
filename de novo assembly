# ==============================
# 1. Create and activate a conda environment
# ==============================
conda create -n assembly_tutorial -c bioconda -c conda-forge spades quast fastqc -y
conda activate assembly_tutorial
conda activate assembly_tutorial


# ==============================
# 2. Download paired-end dataset (SRR13554759)
# ==============================
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR135/059/SRR13554759/SRR13554759_1.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR135/059/SRR13554759/SRR13554759_2.fastq.gz


# ==============================
# 3. Quality check with FastQC
# ==============================
mkdir fastqc_results
fastqc SRR13554759_1.fastq.gz SRR13554759_2.fastq.gz -o fastqc_results
#instead this use
fastqc raw_reads/*.fastq.gz -o fastqc_results/

# (Optional: view results by opening the HTML files in fastqc_results/)
trimming data
fastp -i SRR13554759_1.fastq.gz -I SRR13554759_2.fastq.gz -o trim/SRR13554759_1.trim.fastq.gz -O trim/SRR13554759_2.trim.fastq.gz
fastp -i SRR13554759_1.fastq.gz -I SRR13554759_2.fastq.gz -o trim/SRR13554759_1.trim.fastq.gz -O trim/SRR13554759_2.trim.fastq.gz
#!/bin/bash

# Make output folder for trimmed reads
mkdir -p trim

# List of sample names (without _1/_2 suffix)
SAMPLES=(
  "SRR13554759"
  # Add more sample names here if needed, e.g.:
  # "SRRxxxxxxx"
  # "SRRyyyyyyy"
)

# Loop through each sample and run fastp
for SAMPLE in "${SAMPLES[@]}"; do
  echo "Processing $SAMPLE ..."

  fastp \
    -i "${SAMPLE}_1.fastq.gz" \
    -I "${SAMPLE}_2.fastq.gz" \
    -o "trim/${SAMPLE}_1.trim.fastq.gz" \
    -O "trim/${SAMPLE}_2.trim.fastq.gz" \
    --html "trim/${SAMPLE}_fastp.html" \
    --json "trim/${SAMPLE}_fastp.json"

  echo "Finished $SAMPLE âœ…"
done

# ==============================
# 4. Run SPAdes genome assembler
# ==============================
cd de_nove

spades.py \
  -1 raw_reads/trim/SRR13554759_1.trim.fastq.gz \
  -2 raw_reads/trim/SRR13554759_2.trim.fastq.gz \
  -k 41,85 \
  -o assembly

# ==============================
# 5. Evaluate assembly with Quast
# ==============================
quast spades_output/contigs.fasta -o quast_report

# ==============================
# 6. Visualize assembly graph (Bandage, GUI tool)
# ==============================
# Bandage cannot be installed via terminal (needs GUI).
# Download here: https://rrwick.github.io/Bandage/
# Then open the file: spades_output/assembly_graph.fastg
quast.py assembly/contigs.fasta -o quast_report
download report
scp -r sararomi@135.181.163.242:/home/sararomi/habiba/de_novo/quast_report ~/Downloads/

